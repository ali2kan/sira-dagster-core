scheduler:
  module: dagster.core.scheduler
  class: DagsterDaemonScheduler

run_coordinator:
  module: dagster.core.run_coordinator
  class: QueuedRunCoordinator
  config:
    max_concurrent_runs: 5
    tag_concurrency_limits:
      - key: "operation"
        value: "example"
        limit: 5

run_launcher:
  module: dagster.core.launcher
  class: DefaultRunLauncher
  config:
    env_vars:
      - DAGSTER_POSTGRES_USER
      - DAGSTER_POSTGRES_PASSWORD
      - DAGSTER_POSTGRES_DB
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DATABASE_IP
      - DATABASE_PORT
      - DATABASE_USER
      - DATABASE_PASSWORD
      - DATABASE_NAME
    # network: dagster_network
    container_kwargs:
      auto_remove: true
      volumes: # Make docker client accessible to any launched containers as well
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp/io_manager_storage:/tmp/io_manager_storage
        # - /tmp/dagster-data:/opt/dagster/dagster_home/storage
# run_launcher:
#   module: dagster_docker
#   class: DockerRunLauncher
#   config:
#     env_vars:
#       - DAGSTER_POSTGRES_USER
#       - DAGSTER_POSTGRES_PASSWORD
#       - DAGSTER_POSTGRES_DB
#       - AWS_ACCESS_KEY_ID
#       - AWS_SECRET_ACCESS_KEY
#       - DATABASE_IP
#       - DATABASE_PORT
#       - DATABASE_USER
#       - DATABASE_PASSWORD
#       - DATABASE_NAME
#     network: dagster_network
#     container_kwargs:
#       auto_remove: true
#       volumes: # Make docker client accessible to any launched containers as well
#         - /var/run/docker.sock:/var/run/docker.sock
#         - /tmp/io_manager_storage:/tmp/io_manager_storage
#         - /tmp/dagster-data:/opt/dagster/dagster_home/storage

# run_launcher:
#   module: dagster_docker
#   class: DockerRunLauncher
#   config:
#     env_vars:
#       - DAGSTER_POSTGRES_USER
#       - DAGSTER_POSTGRES_PASSWORD
#       - DAGSTER_POSTGRES_DB
#       - DAGSTER_POSTGRES_HOST
#       - AWS_ACCESS_KEY_ID
#       - AWS_SECRET_ACCESS_KEY
#       - DATABASE_IP
#       - DATABASE_PORT
#       - DATABASE_USER
#       - DATABASE_PASSWORD
#       - DATABASE_NAME
#       - DAGSTER_CURRENT_IMAGE
#       - PYTHONPATH=/opt/dagster/app
#     network: dagster_network
#     container_kwargs:
#       auto_remove: true
#       working_dir: "/opt/dagster/app" # Set the working directory
#       volumes:
#         - /var/run/docker.sock:/var/run/docker.sock
#         - /tmp/io_manager_storage:/tmp/io_manager_storage
#         - /tmp/dagster-data:/opt/dagster/dagster_home/storage
#         - ${PWD}:/opt/dagster/app/sira_data_pipeline # Mount your code
#         - ${PWD}/..:/opt/dagster/app/pipelines # Mount the parent directory to make the module findable

run_storage:
  module: dagster_postgres.run_storage
  class: PostgresRunStorage
  config:
    postgres_db:
      hostname:
        env: DAGSTER_POSTGRES_HOST
      username:
        env: DAGSTER_POSTGRES_USER
      password:
        env: DAGSTER_POSTGRES_PASSWORD
      db_name:
        env: DAGSTER_POSTGRES_DB
      port: 5432

schedule_storage:
  module: dagster_postgres.schedule_storage
  class: PostgresScheduleStorage
  config:
    postgres_db:
      hostname:
        env: DAGSTER_POSTGRES_HOST
      username:
        env: DAGSTER_POSTGRES_USER
      password:
        env: DAGSTER_POSTGRES_PASSWORD
      db_name:
        env: DAGSTER_POSTGRES_DB
      port: 5432

event_log_storage:
  module: dagster_postgres.event_log
  class: PostgresEventLogStorage
  config:
    postgres_db:
      hostname:
        env: DAGSTER_POSTGRES_HOST
      username:
        env: DAGSTER_POSTGRES_USER
      password:
        env: DAGSTER_POSTGRES_PASSWORD
      db_name:
        env: DAGSTER_POSTGRES_DB
      port: 5432

compute_logs:
  module: dagster_aws.s3.compute_log_manager
  class: S3ComputeLogManager
  config:
    bucket: "etl-dagster-data"
    prefix: "compute-logs"
    skip_empty_files: true
    upload_interval: 30
