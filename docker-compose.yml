services:
  # postgresql_dagster:
  #   image: postgres:17
  #   container_name: postgresql_dagster
  #   environment:
  #     POSTGRES_USER: postgres_user
  #     POSTGRES_PASSWORD: postgres_password
  #     POSTGRES_DB: postgres_db
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - dagster_network

  webserver_dagster:
    # Use image when pulling from registry, build when developing locally
    image: ${DAGSTER_CURRENT_IMAGE:-ghcr.io/ali2kan/sira-dagster-core:latest}
    # build:
    #   context: .
    #   args:
    #     INSTALL_DEV: ${INSTALL_DEV:-false}
    restart: always
    entrypoint:
      - dagster-webserver
      - -h
      - 0.0.0.0
      - -p
      - "3000"
      - -w
      - /opt/dagster/dagster_home/workspace.yaml
    container_name: webserver_dagster
    ports:
      - 3000:3000
    env_file:
      - .env
    environment:
      - DAGSTER_HOME=/opt/dagster/dagster_home
      - DAGSTER_POSTGRES_USER=${DAGSTER_POSTGRES_USER:-postgres}
      - DAGSTER_POSTGRES_PASSWORD=${DAGSTER_POSTGRES_PASSWORD:-postgres}
      - DAGSTER_POSTGRES_DB=${DAGSTER_POSTGRES_DB:-dagster}
      - DAGSTER_POSTGRES_HOST=${POSTGRES_HOST:-10.10.10.199}
      - DAGSTER_CURRENT_IMAGE=${DAGSTER_CURRENT_IMAGE:-ghcr.io/ali2kan/sira-dagster-core:latest}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - UV_SYSTEM_PYTHON=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./core/io_manager_storage:/tmp/io_manager_storage
      - ./core/storage:/opt/dagster/dagster_home/storage
      - ./core/dagster_home/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./core/dagster_home/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      # - ./core/dagster_home/compute-logs:/tmp/dagster-home/storage/compute-logs
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./sira_dagster_core:/opt/dagster/app/sira_dagster_core
      - ./.dagster:/opt/dagster/dagster_home
    networks:
      - dagster_network

  daemon_dagster:
    image: ${DAGSTER_CURRENT_IMAGE:-ghcr.io/ali2kan/sira-dagster-core:latest}
    # build:
    #   context: .
    #   args:
    #     INSTALL_DEV: ${INSTALL_DEV:-false}
    entrypoint:
      - dagster-daemon
      - run
    container_name: daemon_dagster
    restart: on-failure
    env_file:
      - .env
    environment:
      - DAGSTER_HOME=/opt/dagster/dagster_home
      - DAGSTER_POSTGRES_USER=${DAGSTER_POSTGRES_USER:-postgres}
      - DAGSTER_POSTGRES_PASSWORD=${DAGSTER_POSTGRES_PASSWORD:-postgres}
      - DAGSTER_POSTGRES_DB=${DAGSTER_POSTGRES_DB:-dagster}
      - DAGSTER_POSTGRES_HOST=${POSTGRES_HOST:-10.10.10.199}
      - DAGSTER_CURRENT_IMAGE=${DAGSTER_CURRENT_IMAGE:-ghcr.io/ali2kan/sira-dagster-core:latest}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - UV_SYSTEM_PYTHON=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./core/tmp/io_manager_storage:/tmp/io_manager_storage
      - ./core/storage:/opt/dagster/dagster_home/storage
      - ./core/dagster_home/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./core/dagster_home/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./sira_dagster_core:/opt/dagster/app/sira_dagster_core
      - ./.dagster:/opt/dagster/dagster_home
    networks:
      - dagster_network
    # depends_on:
    #   - postgresql_dagster

    # volumes:
    #   postgres_data: # Named volume for PostgreSQL data persistence
  dagster_fastapi_client:
    image: ghcr.io/ali2kan/sira-dagster-fastapi-client:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    container_name: dagster_fastapi_client
    ports:
      - "8000:8000"
    # Command to run the service
    command:
      [
        "uvicorn",
        "trigger_service.trigger:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
      ]
    env_file:
      - .env
    environment:
      - DAGSTER_HOST=10.10.10.34
      - DAGSTER_PORT=3000
      - DAGSTER_REPOSITORY_LOCATION=dlt_pipelines
      - DAGSTER_REPOSITORY_NAME=__repository__
      - API_KEY=${FAST_API_KEY}
    networks:
      - dagster_network
    volumes:
      - .:/code
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dagster_network:
    external: true
    name: dagster_network
